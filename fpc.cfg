#
# Basic checkmate: King and rook (blind computer)
#

# ----------------------
# Defines (preprocessor)
# ----------------------

#
# nested #IFNDEF, #IFDEF, #ENDIF, #ELSE, #DEFINE, #UNDEF are allowed
#
# -d is the same as #DEFINE
# -u is the same as #UNDEF
#

#
# Try compiling with the -dRELEASE or -dDEBUG on the commandline
#

#ifdef DEBUG
  # For a debug version compile with debuginfo and all code generation checks on
  -Sa+
  # Set default code generation checks (IEEE checking for constants, iocheck, overflow, possible overflow, range, stack, method call validity)
  -C3iortR
  -g
  -ghltv
  #WRITE Compiling Debug Version
#else
  # For a release compile with optimizes and strip debuginfo
  -Sa-
  -O3
  -OoSTACKFRAME
  -OoPEEPHOLE
  -OoCSE
  -OoDFA
  # -OoUSEEBP
  -Xs
  -XX
  #WRITE Compiling Release Version
#endif

# assembling
#ifdef darwin
# use pipes instead of temporary files for assembling
-ap
# path to Xcode 4.3+ utilities (no problem if it doesn't exist)
-FD/Applications/Xcode.app/Contents/Developer/usr/bin
#endif

# ----------------
# Parsing switches
# ----------------

# Pascal language mode
#      -Mfpc      free pascal dialect (default)
#      -Mobjfpc   switch some Delphi 2 extensions on
#      -Mdelphi   tries to be Delphi compatible
#      -Mtp       tries to be TP/BP 7.0 compatible
#      -Mgpc      tries to be gpc compatible
#      -Mmacpas   tries to be compatible to the macintosh pascal dialects
#      -Miso      tries to be ISO 7185 Standard Pascal compatible
-Mtp

# Assembler reader mode
#      -Rdefault  use default assembler
#      -Ratt      read AT&T style assembler
#      -Rintel    read Intel style assembler

# Semantic checking
#      -S2        same as -Mobjfpc
#      -Sc        supports operators like C (*=,+=,/= and -=)
#      -Sa        include assertion code.
#      -Sd        same as -Mdelphi
#      -Se<x>     error options. <x> is a combination of the following:
#         <n> : compiler stops after <n> errors (default is 1)
#         w   : compiler stops also after warnings
#         n   : compiler stops also after notes
#         h   : compiler stops also after hints
#      -Sg        allow LABEL and GOTO
#      -Sh        Use ansistrings
#      -Si        turn on inlining of procedures/functions declared as "inline"  
#      -Si        support C++ styled INLINE
#      -Sk        load fpcylix unit
#      -SI<x>     set interface style to <x>
#         -SIcom    COM compatible interface (default)
#         -SIcorba  CORBA compatible interface
#      -Sm-        support macros like C (global)
#      -So        same as -Mtp
#      -Sp        same as -Mgpc
#      -Ss        constructor name must be init (destructor must be done)
#      -St        Allow the static keyword in objects. 
#      -Sx        enable exception keywords (default in Delphi/ObjFPC modes)
#      -Sv        support vector processing (use CPU vector extensions if available)  
-Shv+
-Scgimt-

# ---------------
# Code generation
# ---------------

# Uncomment the next line if you always want static/dynamic units by default
# (can be overruled with -CD, -CS at the commandline)
#-CS
#-CD

# Set the default heapsize to 8Mb
#-Ch8000000

# Set PIC code
-Cg

# Optimizer switches
# -Os        generate smaller code
# -Oa=N      set alignment to N
# -O1        level 1 optimizations (quick optimizations, debuggable)
# -O2        level 2 optimizations (-O1 + optimizations which make debugging more difficult)
# -O3        level 3 optimizations (-O2 + optimizations which also may make the program slower rather than faster)
# -Oo<x>     switch on optimalization x. See fpc -i for possible values
# -OoNO<x>   switch off optimalization x. See fpc -i for possible values
# -Op<x>     set target cpu for optimizing, see fpc -i for possible values

#ifdef darwin
#ifdef cpui386
-Cppentiumm
-Oppentiumm
#endif
#endif

# -----------------------
# Set Filenames and Paths
# -----------------------

# output directory
-FU./obj/

# Both slashes and backslashes are allowed in paths

# searchpath for units and other system dependent things
#ifdef Win32
-Fu$PROGRAM_FILES/freepas/units/$fpctarget
-Fu$PROGRAM_FILES/freepas/units/$fpctarget/*
-Fu$PROGRAM_FILES/freepas/units/$fpctarget/rtl
#else
-Fuunits/$fpctarget
-Fuunits/$fpctarget/*
-Fuunits/$fpctarget/rtl
#endif

#ifdef cpui8086
-Fu$PROGRAM_FILES/freepas/units/$fpctarget/$fpcsubarch-$fpcmemorymodel
-Fu$PROGRAM_FILES/freepas/units/$fpctarget/$fpcsubarch-$fpcmemorymodel/*
-Fu$PROGRAM_FILES/freepas/units/$fpctarget/$fpcsubarch-$fpcmemorymodel/rtl
#endif

#ifndef CPUI386
#ifndef CPUAMD64
#define NEEDCROSSBINUTILS
#endif
#endif

#ifndef Win32
#define NEEDCROSSBINUTILS
#endif

# never need cross-prefix when targeting the JVM
# (no native compiler, always cross-compiling)
#ifdef cpujvm
#undef NEEDCROSSBINUTILS
#endif

# for android cross-prefix is set by compiler
#ifdef android
#undef NEEDCROSSBINUTILS
#endif

# never need cross-prefix when targeting the i8086
# (no native compiler, always cross-compiling)
#ifdef cpui8086
#undef NEEDCROSSBINUTILS
#endif

# never need cross-prefix when targeting the i8086
# (no native compiler, always cross-compiling)
#ifdef cpujvm
#undef NEEDCROSSBINUTILS
#endif

# binutils prefix for cross compiling
#ifdef FPC_CROSSCOMPILING
#ifdef NEEDCROSSBINUTILS
  -XP$FPCTARGET-
#endif
#endif


# -------------
# Linking
# -------------

# generate always debugging information for GDB (slows down the compiling
# process)
#      -gc        generate checks for pointers
#      -gd        use dbx
#      -gg        use gsym
#      -gh        use heap trace unit (for memory leak debugging)
#      -gl        use line info unit to show more info for backtraces
#      -gv        generates programs tracable with valgrind
#      -gw        generate dwarf debugging info

# always pass an option to the linker
#-k-s

# Always strip debuginfo from the executable
-Xs

# Always use smartlinking on i8086, because the system unit exceeds the 64kb
# code limit
#ifdef cpui8086
-CX
#endif


# -------------
# Miscellaneous
# -------------

# Write always a nice FPC logo ;)
#-l

# Verbosity
#      e : Show errors (default)       d : Show debug info
#      w : Show warnings               u : Show unit info
#      n : Show notes                  t : Show tried/used files
#      h : Show hints                  s : Show time stamps
#      i : Show general info           q : Show message numbers
#      l : Show linenumbers            c : Show conditionals
#      a : Show everything             0 : Show nothing (except errors)
#      b : Write file names messages   r : Rhide/GCC compatibility mode
#          with full path              x : Executable info (Win32 only)
#      v : write fpcdebug.txt with     p : Write tree.log with parse tree
#          lots of debugging info
-vewnh

# OS-depend options

#ifdef Win32
  -WB 
  -WC
  -WR
#endif
